options{  static = true;}PARSER_BEGIN(Compiler)import java.io.*;import Exceptions.*;// Compiler for the While0 language
public class Compiler{  private static CodeGenerator cg;    public static void main(String args []) throws ParseException  {    // I/O file paths    String filePath = "./test_programs/mult.txt";    String outputFilePath = filePath + ".urm";    // Instantiate code generator    cg = new CodeGenerator();        try    {      // Read test program from file      FileInputStream fileStream = new FileInputStream(filePath);            // Parse test program      Compiler compiler = new Compiler(fileStream);      compiler.program();      System.out.println(String.format("While0 program from '%s' successfully parsed.", filePath));      // Output      cg.generateAndWriteToFile(outputFilePath, false);    }    catch (Exception ex)    {      System.out.println(String.format("Failed to parse While0 program from '%s'!", filePath));    }  }}PARSER_END(Compiler)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < LPARENT : "(" >| < RPARENT : ")" >| < SEMICOLON : ";" >| < COMMA : "," >| < ASSIGN : "=" >| < PLUS : "+" >| < ZERO : "0" >| < ONE : "1" >| < NOTEQUAL : "!=" >| < IN : "in" >| < OUT : "out" >| < VAR : "var" >| < WHILE : "while" >| < DO : "do" >| < BEGIN : "begin" >| < END : "end" >| < IDENT : (["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"])* >}void program() throws While0ParserError :{  Token identifier;}{  identifier = <IDENT> { cg.setProgramName(identifier.image); } <LPARENT> inputVariables() <SEMICOLON> outputVariables() <RPARENT> <SEMICOLON> vars() <SEMICOLON> statements() <EOF>}void inputVariables() throws While0ParserError :{  Token identifier;}{  <IN> (identifier = <IDENT> { cg.addVariable(identifier.image); }  (<COMMA> identifier = <IDENT> { cg.addVariable(identifier.image); } )* )?}void outputVariables() throws While0ParserError :{  Token identifier;}{  <OUT> identifier = <IDENT> { cg.setOutputVariable(identifier.image); }}void vars() throws While0ParserError :{  Token identifier;}{  <VAR> <LPARENT> (identifier = <IDENT> { cg.addVariable(identifier.image); }  (<COMMA> identifier = <IDENT> { cg.addVariable(identifier.image); })* )? <RPARENT>}void statements() throws While0ParserError :{}{   (assignment() | while_statement()) (<SEMICOLON> statements())?}void assignment() throws While0ParserError :{  Token assignee;  Token assigned;}{   assignee = <IDENT> <ASSIGN> (     <ZERO> { cg.assignZero(assignee.image); } |     assigned = <IDENT> <PLUS> <ONE> { cg.assignVariableValueAndIncrement(assignee.image, assigned.image); })}void while_statement() throws While0ParserError :{    Token operand1;    Token operand2;}{   <WHILE> operand1 = <IDENT> <NOTEQUAL> operand2 = <IDENT> <DO> <BEGIN> { cg.startWhileLoop(operand1.image, operand2.image); }   statements() <END> { cg.endWhileLoop(); }}
