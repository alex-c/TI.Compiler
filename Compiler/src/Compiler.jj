options{  static = true;}PARSER_BEGIN(Compiler)import java.io.*;// Compiler for the While0 language
public class Compiler{  public static void main(String args []) throws ParseException  {    // Program to compile    String filePath = "./test_programs/a18.txt";    try    {      // Read test program from file      FileInputStream fileStream = new FileInputStream(filePath);            // Parse test program      Compiler compiler = new Compiler(fileStream);      compiler.program();      System.out.println(String.format("While0 program from '%s' successfully parsed.", filePath));    }    catch (Exception ex)    {      System.out.println(String.format("Failed to parse While0 program from '%s'!", filePath));    }  }}PARSER_END(Compiler)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < LPARENT : "(" >| < RPARENT : ")" >| < SEMICOLON : ";" >| < COMMA : "," >| < ASSIGN : "=" >| < PLUS : "+" >| < ZERO : "0" >| < ONE : "1" >| < NOTEQUAL : "!=" >| < IN : "in" >| < OUT : "out" >| < VAR : "var" >| < WHILE : "while" >| < DO : "do" >| < BEGIN : "begin" >| < END : "end" >| < IDENT : (["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"])* >}void program() :{}{  <IDENT> <LPARENT> inputVariables() <SEMICOLON> outputVariables() <RPARENT> <SEMICOLON> vars() <SEMICOLON> statements() <EOF>}void inputVariables() :{}{  <IN> (<IDENT> (<COMMA> <IDENT>)* )?}void outputVariables() :{}{  <OUT> <IDENT>}void vars() :{}{  <VAR> <LPARENT> (<IDENT> (<COMMA> <IDENT>)* )? <RPARENT>}void statements() :{}{   (assignment() | while_statement()) (<SEMICOLON> statements())?}void assignment() :{}{   <IDENT> <ASSIGN> (<ZERO> | <IDENT> <PLUS> <ONE>)}void while_statement() :{}{   <WHILE> <IDENT> <NOTEQUAL> <IDENT> <DO> <BEGIN> statements() <END>   }
